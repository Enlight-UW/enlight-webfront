FORMAT: 1A
HOST: http://www.example.com

# enlight
The web API for the fountain. All API users must acquire an API key, which will have certain properties like a priority level and internal identifiers on the server.

# Group Authentication
First, an API user must request control to be allowed a timeslice in controlling the fountain.

## Query Control [/control/query]
Before attempting to acquire control, you can query to see if another API user has control. If an object is returned here, that API user currently has control of the fountain. Only if your API key has a higher priority than them will your request for control succeed. It is not necessary to invoke this before requesting control, but it will let you know if such a request would fail or succeed. If a queue position is 0, that user is currently controlling the fountain. Queue positions start at 1 and increase, per priority level.

### Query Control [GET]
+ Response 200 (application/json)

        [
            { "controllerID": 1, "acquired": 12340000, "expires": 12340015, "priority": 4, "queuePosition": 0 },
            { "controllerID": 2, "acquired": 12340008, "expires": 12340035, "priority": 4, "queuePosition": 1 },
            { "controllerID": 45, "acquired": 12340010, "expires": 12340045, "priority": 4, "queuePosition": 2 },
            { "controllerID": 69, "acquired": 12340011, "expires": 12340055, "priority": 3, "queuePosition": 1 },
            { "controllerID": 120, "acquired": 12340014, "expires": 12340060, "priority": 3, "queuePosition": 2 }
        ]
            

## Request Control [/control/request]
If your internal priority is higher than the current user (or no one else is using the API), you will be leased the ability to invoke commands. A control request can contain a desired length of control, and (based on load balancing or time-sharing or other factors) the server will respond with the actual acquisition time of the control request. Issuing another control request while you have one in the queue will not do anything. The server will round-robin, with precedence given to higher priority levels. If `queuePosition` is 0 in the return, then you have directly taken control. Otherwise, you will have to wait. `success` will only be false if some kind of error (like authentication) happens. Being queued is not considered an error, so you might see `success` true even if you have to wait. If your client has to wait, the `acquire` field will try to indicate approximately when you can expect control. The requested time will be added to this to determine an expiration time. It is still possible this window might not be available to you even after waiting if someone with a higher priority comes along. In that case, just keep requesting a position and eventually you should get one...
### Request Control [POST]
+ Request (application/json)

        { "apikey": "some alphanumeric api key", "requestedLength": 15 }
        
+ Response 200 (application/json)

        { "success": true, "acquire": 12340010, "ttl": 15, "priority": 3, "controllerID": 45, "queuePosition": 0 }
        
## Release Control [/control/release]
If you decide to release your control early, you can hit this endpoint. This will open the control up for other users. The server doesn't notify other users of this, though - they'd still have to query to see that it opened up.

### Release Control [POST]
+ Request (application/json)

        { "apikey": "some alphanumeric api key" }

+ Response 200 (application/json)

        { "success": true }

# Group Valve Interaction
Once an API user has successfully requested control, they may change the valve states and do other cool things with the fountain.

## Valves  [/valves]
Valves can be queried for their state. Some valves may be disabled due to malfunction, while others are on and spraying water. These states are reflected in the returned data. The `id` field here represents the valve's position in any binary bitmask format (`id` 1 would be the least significant bit, and so on).

### Query [GET]
+ Response 200 (application/json)

        [
          { "id": 1, "name": "V1", "spraying": true, "enabled": true },
          { "id": 2, "name": "V2", "spraying": true, "enabled": true },
          { "id": 3, "name": "V3", "spraying": true, "enabled": true },
          { "id": 4, "name": "V4", "spraying": true, "enabled": true },
          { "id": 5, "name": "V5", "spraying": true, "enabled": true },
          { "id": 6, "name": "V6", "spraying": true, "enabled": true },
          { "id": 7, "name": "V7", "spraying": true, "enabled": true },
          { "id": 8, "name": "V8", "spraying": true, "enabled": true },
          { "id": 9, "name": "V9", "spraying": true, "enabled": true },
          { "id": 10, "name": "V10", "spraying": true, "enabled": true },
          { "id": 11, "name": "VC", "spraying": true, "enabled": true },
          { "id": 12, "name": "VR", "spraying": true, "enabled": true },
          { "id": 13, "name": "H1", "spraying": true, "enabled": true },
          { "id": 14, "name": "H2", "spraying": true, "enabled": true },
          { "id": 15, "name": "H3", "spraying": true, "enabled": true },
          { "id": 16, "name": "H4", "spraying": true, "enabled": true },
          { "id": 17, "name": "H5", "spraying": true, "enabled": true },
          { "id": 18, "name": "H6", "spraying": true, "enabled": true },
          { "id": 19, "name": "H7", "spraying": true, "enabled": true },
          { "id": 20, "name": "H8", "spraying": true, "enabled": true },
          { "id": 21, "name": "H9", "spraying": true, "enabled": true },
          { "id": 22, "name": "H10", "spraying": true, "enabled": true },
          { "id": 23, "name": "HC", "spraying": true, "enabled": true },
          { "id": 24, "name": "HR", "spraying": true, "enabled": true }
        ]
        
### Set [POST]
If you want to set all the valves at once via a binary bitmask with each bit from the LSB representing the ID of one of the valves, use this endpoint. Otherwise, identify a valve and set it individually. A 1 represents on, and a 0 represents off.

+ Request

        { "apikey": "some alphanumeric api key", "bitmask": 1024 }
    
+ Response 200 (application/json)

        { "success": true }

## Valve [/valves/{id}]
A single valve object with the ability to query or set properties.

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the valve to perform action with.

### Query [GET]
+ Response 200 (application/json)

         { "id": {id}, "name": "H9", "spraying": true, "enabled": true }

### Set [POST]
Set some properties about the valve, like whether it's on or off.
+ Request (application/json)

        { "apikey": "some alphanumeric api key", "spraying": true }

+ Response 200 (application/json)

        { "success": true }

# Group Pattern Management
Stored patterns can be queried and executed using the API as well.

## Patterns [/patterns]
The fountain can store patterns for later playback.

### Query [GET]
Retrieve a list of known patterns. This can also be used to determine if a pattern is running, by looking at the `active` field.

+ Response 200 (application/json)

        [
            { "id": 1, "name": "Pattern name 1", "active": true },
            { "id": 3, "name": "Pattern name 3", "active": false },
            { "id": 4, "name": "Pattern name 4", "active": false }
        ]
        
## Pattern [/pattern/{id}]

+ Parameters

    + id (required, number, `1`) ... Numeric `id` of the pattern to engage.
    
### Set [POST]
Attempt to start playing a given pattern. This requires control of the fountain, but once your application's control is over, the pattern may or may not be set as the default playing pattern based on the `setCurrent` attribute. If not set, the fountain will default to whatever it was playing before your application played the pattern.

+ Request (application/json)

        { "apikey": "some alphanumeric api key", "setCurrent": true }
        
+ Response 200 (application/json)

        { "success": true }
