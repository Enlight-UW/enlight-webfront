FORMAT: 1A
HOST: http://www.example.com
VERSION: 28 AUG 2014

# enlight
The web API for the fountain. All API users must acquire an API key, which will have certain properties like a priority level and internal identifiers on the server.

# Group Authentication
First, an API user must request control to be allowed a timeslice in controlling the fountain.

## Query Control [/control/query]
There are two ways to query control - the GET verb, which will return the entire list of queued controllers with their respective queue positions and priorities, and the POST verb, which will return a queue position and time estimate based on a given `controllerID`.

### Query Control [GET]
A controller is in control if its priority is the highest of all other entries in the queue, and its queue position is 0. There may be multiple items with `queuePosition` set to `0`, but only the one with the highest priority will be in control. The `acquire` field represents the time at which the request was placed, not when the controller gained or gains control. `ttl` represents how long the controller will be in control, barring any higher priority overrides.

+ Response 200 (application/json)

        { "success": "true", "items": [
            { "controllerID": 1, "acquire": 12340000, "ttl": 15, "priority": 4, "queuePosition": 0 },
            { "controllerID": 2, "acquire": 12340008, "ttl": 35, "priority": 4, "queuePosition": 1 },
            { "controllerID": 45, "acquire": 12340010, "ttl": 45, "priority": 4, "queuePosition": 2 },
            { "controllerID": 69, "acquire": 12340011, "ttl": 10, "priority": 3, "queuePosition": 0 },
            { "controllerID": 120, "acquire": 12340014, "ttl": 10, "priority": 3, "queuePosition": 1 }
        ] }
            
### Query Control [POST]
The POST verb expects a `controllerID` (which an app will receive when it makes a queue request), and the returned information will indicate whether that identified `controllerID` is in control, and if not, how much longer it should expect to wait to gain control.

+ Request (application/json)

        { "apikey": "some alphanumeric api key", "controllerID": 123 }
        
+ Response 200 (application/json)
    
        { "success": true, "trueQueuePosition": 3, "eta": 15 }

## Request Control [/control/request]
If your internal priority is higher than the current user (or no one else is using the API), you will be leased the ability to invoke commands. A control request contains a desired length of control. After getting a `controllerID` from this request, check it with a POST to `/control/query` to see if you're actually in control.

### Request Control [POST]
+ Request (application/json)

        { "apikey": "some alphanumeric api key", "requestedLength": 15 }
        
+ Response 200 (application/json)

        { "success": true, "ttl: 15, "controllerID": 45 }
        
## Release Control [/control/release]
If you decide to release your control early, you can hit this endpoint. This will open the control up for other users. The server doesn't notify other users of this, though - they'd still have to query to see that it opened up.

### Release Control [POST]
+ Request (application/json)

        {  "apikey": "some alphanumeric api key", "controllerID": 15 }

+ Response 200 (application/json)

        { "success": true }

# Group Valve Interaction
Once an API user has successfully requested control, they may change the valve states and do other cool things with the fountain.

## Valves  [/valves]
Valves can be queried for their state. Some valves may be disabled due to malfunction, while others are on and spraying water. These states are reflected in the returned data. The `id` field here represents the valve's position in any binary bitmask format (`id` 1 would be the least significant bit, and so on).

### Query [GET]
+ Response 200 (application/json)

        { "success": "true", "items": [
            { "id": 1, "name": "V1", "spraying": true, "enabled": true },
            { "id": 2, "name": "V2", "spraying": true, "enabled": true },
            { "id": 3, "name": "V3", "spraying": true, "enabled": true },
            { "id": 4, "name": "V4", "spraying": true, "enabled": true },
            { "id": 5, "name": "V5", "spraying": true, "enabled": true },
            { "id": 6, "name": "V6", "spraying": true, "enabled": true },
            { "id": 7, "name": "V7", "spraying": true, "enabled": true },
            { "id": 8, "name": "V8", "spraying": true, "enabled": true },
            { "id": 9, "name": "V9", "spraying": true, "enabled": true },
            { "id": 10, "name": "V10", "spraying": true, "enabled": true },
            { "id": 11, "name": "VC", "spraying": true, "enabled": true },
            { "id": 12, "name": "VR", "spraying": true, "enabled": true },
            { "id": 13, "name": "H1", "spraying": true, "enabled": true },
            { "id": 14, "name": "H2", "spraying": true, "enabled": true },
            { "id": 15, "name": "H3", "spraying": true, "enabled": true },
            { "id": 16, "name": "H4", "spraying": true, "enabled": true },
            { "id": 17, "name": "H5", "spraying": true, "enabled": true },
            { "id": 18, "name": "H6", "spraying": true, "enabled": true },
            { "id": 19, "name": "H7", "spraying": true, "enabled": true },
            { "id": 20, "name": "H8", "spraying": true, "enabled": true },
            { "id": 21, "name": "H9", "spraying": true, "enabled": true },
            { "id": 22, "name": "H10", "spraying": true, "enabled": true },
            { "id": 23, "name": "HC", "spraying": true, "enabled": true },
            { "id": 24, "name": "HR", "spraying": true, "enabled": true }
        ] }
        
### Set [POST]
If you want to set all the valves at once via a binary bitmask with each bit from the LSB representing the ID of one of the valves, use this endpoint. Otherwise, identify a valve and set it individually. A 1 represents on, and a 0 represents off.

+ Request

        { "apikey": "some alphanumeric api key", "controllerID": 15, "bitmask": 1024 }
    
+ Response 200 (application/json)

        { "success": true }

## Valve [/valves/{id}]
A single valve object with the ability to query or set properties.

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the valve to perform action with.

### Query [GET]
+ Response 200 (application/json)

         { "id": {id}, "name": "H9", "spraying": true, "enabled": true }

### Set [POST]
Set some properties about the valve, like whether it's on or off.
+ Request (application/json)

        { "apikey": "some alphanumeric api key", "controllerID": 15, "spraying": true }

+ Response 200 (application/json)

        { "success": true }

# Group Pattern Management
Stored patterns can be queried and executed using the API as well.

## Patterns [/patterns]
The fountain can store patterns for later playback.

### Query [GET]
Retrieve a list of known patterns. This can also be used to determine if a pattern is running, by looking at the `active` field.

+ Response 200 (application/json)

        { "success": "true", "items": [
            { "id": 1, "name": "Pattern name 1", "active": true },
            { "id": 3, "name": "Pattern name 3", "active": false },
            { "id": 4, "name": "Pattern name 4", "active": false }
        ] }
        
## Pattern [/patterns/{id}]

+ Parameters

    + id (required, number, `1`) ... Numeric `id` of the pattern to engage.
    
### Set [POST]
Attempt to start playing a given pattern. This requires control of the fountain, but once your application's control is over, the pattern may or may not be set as the default playing pattern based on the `setCurrent` attribute. If not set, the fountain will default to whatever it was playing before your application played the pattern.

+ Request (application/json)

        { "apikey": "some alphanumeric api key", "controllerID": 15, "setCurrent": true }
        
+ Response 200 (application/json)

        { "success": true }
